<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  
  <configSections>
    <section name="unity" type="Microsoft.Practices.Unity.Configuration.UnityConfigurationSection, Microsoft.Practices.Unity.Configuration" />
  </configSections>
  
  <unity xmlns="http://schemas.microsoft.com/practices/2010/unity">
    <sectionExtension type="Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptionConfigurationExtension, Microsoft.Practices.Unity.Interception.Configuration"/>

    <!-- Assemblies -->
    <assembly name="Librame" />

    <!-- Namespaces -->
    <namespace name="Librame" />
    <namespace name="Librame.Container.Interception" />
    <namespace name="Librame.Utility.TypeConverters" />

    <!-- Librame Architecture -->
    <container name="LibrameArchitecture">
      <extension type="Interception"/>
      
      <!-- Adaptation.IAdapterCollection -->
      <register type="Adaptation.IAdapterCollection" mapTo="Adaptation.AdapterCollection">
        <interceptor type="InterfaceInterceptor"/>
        <interceptionBehavior type="ExceptionLogInterceptionBehavior"/>
        <lifetime type="singleton" />
      </register>
      
      <!-- Adaptation.AdapterSettings -->
      <register type="Adaptation.AdapterSettings">
        <!-- 授权标识 -->
        <property name="AuthId" value="2549A5C4BF06F34E9E53847979253E98" />
        <!-- 字符编码 -->
        <property name="Encoding" value="utf-8" typeConverter="EncodingTypeConverter" />
        <lifetime type="singleton" />
      </register>

      <!-- AlgorithmSettings -->
      <register type="Algorithm.AlgorithmSettings">
        <property name="AdapterSettings" dependencyType="Adaptation.AdapterSettings" />
        <!-- 用于派生密钥的密钥 Salt -->
        <property name="KeySalt" value="ABCDEFGHIJKLMN" />
        <!-- 用于加密的迭代数 -->
        <property name="IterationCount" value="1000" />
        <lifetime type="singleton" />
      </register>

      <!-- AuthorizeSettings -->
      <register type="Authorization.AuthorizeSettings">
        <property name="AdapterSettings" dependencyType="Adaptation.AdapterSettings" />
        <!-- 启用认证功能 -->
        <property name="EnableAuthorize" value="true" />
        <!-- 过期天数 -->
        <property name="ExpirationDays" value="1" />
        <!-- 启用 SSO -->
        <property name="EnableSso" value="false" />
        <!-- 是否处于 SSO 服务器模式 -->
        <property name="IsSsoServerMode" value="true" />
        <!-- SSO 认证服务器登录 URL -->
        <property name="SsoServerSignInUrl" value="http://192.168.0.6/User/Login?authid=$(authid)&amp;respondurl=$(respondurl)" />
        <!-- SSO 认证登录应答 URL -->
        <property name="SsoSignInRespondUrl" value="http://192.168.0.8/User/Login?token=$(token)" />
        <!-- SSO 认证服务器登出 URL -->
        <property name="SsoServerSignOutUrl" value="http://192.168.0.6/User/Logout?authid=$(authid)&amp;token=$(token)&amp;respondurl=$(respondurl)" />
        <!-- SSO 认证登出应答 URL -->
        <property name="SsoSignOutRespondUrl" value="http://192.168.0.8/User/Logout?token=$(token)" />
        <lifetime type="singleton" />
      </register>
      
      <!-- DataSettings -->
      <register type="Data.DataSettings">
        <property name="AdapterSettings" dependencyType="Adaptation.AdapterSettings" />
        <!-- 支持数据库文件、连接字符串、ConnectionStringKey=、AppSettingKey=等 -->
        <!-- 在 NHibernate 环境下，默认支持 SQLite(.db)、SqlCe(.sdf) 等单文件数据库 -->
        <property name="Database" value="ConnectionStringKey=TestConnection" />
        <!-- 是否为文件型数据库（以启用系统对相对路径的支持） -->
        <property name="IsDatabaseFile" value="false" />
        <!-- 数据库提供程序名（主要针对非文件型数据库） -->
        <!-- 在 NHibernate 环境下，默认支持 mssql、mysql、oracle、oracledata、oraclemanageddate 等数据库系统 -->
        <property name="ProviderName" value="mssql" />
        <!-- 包含实体的程序集列表（多个之间以英文分号分隔） -->
        <property name="AssemblyStrings" value="Librame.Tests" />
        <!-- 启用实体自映射（即仅自映射实现了 IEntityAutomapping 接口的实体） -->
        <property name="EnableEntityAutomapping" value="true" />
        <!-- EntityFramework 管道类型字符串 -->
        <property name="EntityProviderTypeString" value="Librame.Data.Providers.EntityProvider, Librame" />
        <!-- NHibernate 管道类型字符串 -->
        <property name="HibernateProviderTypeString" value="Librame.Data.Providers.HibernateProvider, Librame" />
        <lifetime type="singleton" />
      </register>

      <!-- FormsSettings -->
      <register type="Forms.FormsSettings">
        <property name="AdapterSettings" dependencyType="Adaptation.AdapterSettings" />
        <!-- 窗体内距 -->
        <property name="FormPadding" value="14" />
        <!-- 文本呈现方式 -->
        <property name="TextRendering" value="SystemDefault" typeConverter="TextRenderingHintTypeConverter" />
        <lifetime type="singleton" />
      </register>

      <!-- IOperateLogProvider（操作日志管道，需重写实现自己的操作日志管道逻辑） -->
      <register type="OperationLog.IOperateLogProvider" mapTo="OperationLog.OperateLogProviderBase">
        <constructor>
          <param name="adapters" dependencyType="Adaptation.IAdapterCollection" />
        </constructor>
        <interceptor type="InterfaceInterceptor"/>
        <interceptionBehavior type="ExceptionLogInterceptionBehavior"/>
        <lifetime type="singleton" />
      </register>
      
      <!-- IAuthorizeManagerCollection（认证管理器集合，可重写实现自己的认证管理器集合逻辑） -->
      <register type="Authorization.IAuthorizeManagerCollection" mapTo="Authorization.AuthorizeManagerCollection">
        <constructor>
          <param name="adapters" dependencyType="Adaptation.IAdapterCollection" />
        </constructor>
        <interceptor type="InterfaceInterceptor"/>
        <interceptionBehavior type="ExceptionLogInterceptionBehavior"/>
        <lifetime type="singleton" />
      </register>
      <!-- IAuthorizeProviderCollection（认证管道集合，需重写实现自己的认证管道集合逻辑） -->
      <register type="Authorization.IAuthorizeProviderCollection" mapTo="Authorization.AuthorizeProviderCollection">
        <constructor>
          <param name="managers" dependencyType="Authorization.IAuthorizeManagerCollection" />
        </constructor>
        <interceptor type="InterfaceInterceptor"/>
        <interceptionBehavior type="ExceptionLogInterceptionBehavior"/>
        <lifetime type="singleton" />
      </register>

      <!-- IRepository<T>（数据仓库，默认采用 EntityFramework 框架；因 FluentNHibernate 枚举自映射有 BUG） -->
      <!-- Data.Repositories.HibernateRepository[] 表示 NHibernate 框架 -->
      <!-- Data.Repositories.EntityRepository[] 表示 EntityFramework 框架 -->
      <register type="Data.IRepository[]" mapTo="Data.Repositories.EntityRepository[]">
        <constructor>
          <param name="dataSettings" dependencyType="Data.DataSettings" />
        </constructor>
        <interceptor type="InterfaceInterceptor"/>
        <interceptionBehavior type="ExceptionLogInterceptionBehavior"/>
      </register>

      <!-- Librame Adapters -->
      <register type="Algorithm.IAlgorithmAdapter" mapTo="Algorithm.DefaultAlgorithmAdapter">
        <property name="Adapters" dependencyType="Adaptation.IAdapterCollection" />
        <property name="Settings" dependencyType="Adaptation.AdapterSettings" />
        <property name="AlgoSettings" dependencyType="Algorithm.AlgorithmSettings" />
        <interceptor type="InterfaceInterceptor"/>
        <interceptionBehavior type="ExceptionLogInterceptionBehavior"/>
        <lifetime type="singleton" />
      </register>

      <register type="Authorization.IAuthorizeAdapter" mapTo="Authorization.DefaultAuthorizeAdapter">
        <property name="Adapters" dependencyType="Adaptation.IAdapterCollection" />
        <property name="Settings" dependencyType="Adaptation.AdapterSettings" />
        <property name="AuthSettings" dependencyType="Authorization.AuthorizeSettings" />
        <property name="Managers" dependencyType="Authorization.IAuthorizeManagerCollection" />
        <property name="Providers" dependencyType="Authorization.IAuthorizeProviderCollection" />
        <interceptor type="InterfaceInterceptor"/>
        <interceptionBehavior type="ExceptionLogInterceptionBehavior"/>
        <lifetime type="singleton" />
      </register>

      <register type="Compression.ICompressionAdapter" mapTo="Compression.DefaultCompressionAdapter">
        <property name="Adapters" dependencyType="Adaptation.IAdapterCollection" />
        <property name="Settings" dependencyType="Adaptation.AdapterSettings" />
        <interceptor type="InterfaceInterceptor"/>
        <interceptionBehavior type="ExceptionLogInterceptionBehavior"/>
        <lifetime type="singleton" />
      </register>
      
      <register type="Data.IDataAdapter" mapTo="Data.DefaultDataAdapter">
        <property name="Adapters" dependencyType="Adaptation.IAdapterCollection" />
        <property name="Settings" dependencyType="Adaptation.AdapterSettings" />
        <property name="DataSettings" dependencyType="Data.DataSettings" />
        <interceptor type="InterfaceInterceptor"/>
        <interceptionBehavior type="ExceptionLogInterceptionBehavior"/>
        <lifetime type="singleton" />
      </register>
      
      <register type="Forms.IFormsAdapter" mapTo="Forms.DefaultFormsAdapter">
        <property name="Adapters" dependencyType="Adaptation.IAdapterCollection" />
        <property name="Settings" dependencyType="Adaptation.AdapterSettings" />
        <property name="FormsSettings" dependencyType="Forms.FormsSettings" />
        <interceptor type="InterfaceInterceptor"/>
        <interceptionBehavior type="ExceptionLogInterceptionBehavior"/>
        <lifetime type="singleton" />
      </register>

      <register type="FulltextSearch.IFulltextSearchAdapter" mapTo="FulltextSearch.DefaultFulltextSearchAdapter">
        <property name="Adapters" dependencyType="Adaptation.IAdapterCollection" />
        <property name="Settings" dependencyType="Adaptation.AdapterSettings" />
        <interceptor type="InterfaceInterceptor"/>
        <interceptionBehavior type="ExceptionLogInterceptionBehavior"/>
        <lifetime type="singleton" />
      </register>

      <register type="Html.IHtmlAdapter" mapTo="Html.DefaultHtmlAdapter">
        <property name="Adapters" dependencyType="Adaptation.IAdapterCollection" />
        <property name="Settings" dependencyType="Adaptation.AdapterSettings" />
        <interceptor type="InterfaceInterceptor"/>
        <interceptionBehavior type="ExceptionLogInterceptionBehavior"/>
        <lifetime type="singleton" />
      </register>

      <register type="Http.IHttpAdapter" mapTo="Http.DefaultHttpAdapter">
        <property name="Adapters" dependencyType="Adaptation.IAdapterCollection" />
        <property name="Settings" dependencyType="Adaptation.AdapterSettings" />
        <interceptor type="InterfaceInterceptor"/>
        <interceptionBehavior type="ExceptionLogInterceptionBehavior"/>
        <lifetime type="singleton" />
      </register>

      <register type="MediaInfo.IMediaInfoAdapter" mapTo="MediaInfo.DefaultMediaInfoAdapter">
        <property name="Adapters" dependencyType="Adaptation.IAdapterCollection" />
        <property name="Settings" dependencyType="Adaptation.AdapterSettings" />
        <interceptor type="InterfaceInterceptor"/>
        <interceptionBehavior type="ExceptionLogInterceptionBehavior"/>
        <lifetime type="singleton" />
      </register>

      <register type="Office.IOfficeAdapter" mapTo="Office.DefaultOfficeAdapter">
        <property name="Adapters" dependencyType="Adaptation.IAdapterCollection" />
        <property name="Settings" dependencyType="Adaptation.AdapterSettings" />
        <interceptor type="InterfaceInterceptor"/>
        <interceptionBehavior type="ExceptionLogInterceptionBehavior"/>
        <lifetime type="singleton" />
      </register>

      <register type="OperationLog.IOperationLogAdapter" mapTo="OperationLog.DefaultOperationLogAdapter">
        <property name="Adapters" dependencyType="Adaptation.IAdapterCollection" />
        <property name="Settings" dependencyType="Adaptation.AdapterSettings" />
        <interceptor type="InterfaceInterceptor"/>
        <interceptionBehavior type="ExceptionLogInterceptionBehavior"/>
        <lifetime type="singleton" />
      </register>

      <register type="Pinyin.IPinyinAdapter" mapTo="Pinyin.DefaultPinyinAdapter">
        <property name="Adapters" dependencyType="Adaptation.IAdapterCollection" />
        <property name="Settings" dependencyType="Adaptation.AdapterSettings" />
        <interceptor type="InterfaceInterceptor"/>
        <interceptionBehavior type="ExceptionLogInterceptionBehavior"/>
        <lifetime type="singleton" />
      </register>
      
      <register type="Resource.IResourceAdapter" mapTo="Resource.DefaultResourceAdapter">
        <property name="Adapters" dependencyType="Adaptation.IAdapterCollection" />
        <property name="Settings" dependencyType="Adaptation.AdapterSettings" />
        <interceptor type="InterfaceInterceptor"/>
        <interceptionBehavior type="ExceptionLogInterceptionBehavior"/>
        <lifetime type="singleton" />
      </register>

      <register type="Scheduler.ISchedulerAdapter" mapTo="Scheduler.DefaultSchedulerAdapter">
        <property name="Adapters" dependencyType="Adaptation.IAdapterCollection" />
        <property name="Settings" dependencyType="Adaptation.AdapterSettings" />
        <interceptor type="InterfaceInterceptor"/>
        <interceptionBehavior type="ExceptionLogInterceptionBehavior"/>
        <lifetime type="singleton" />
      </register>

      <register type="SensitiveWord.ISensitiveWordAdapter" mapTo="SensitiveWord.DefaultSensitiveWordAdapter">
        <property name="Adapters" dependencyType="Adaptation.IAdapterCollection" />
        <property name="Settings" dependencyType="Adaptation.AdapterSettings" />
        <interceptor type="InterfaceInterceptor"/>
        <interceptionBehavior type="ExceptionLogInterceptionBehavior"/>
        <lifetime type="singleton" />
      </register>

      <register type="Socket.ISocketAdapter" mapTo="Socket.DefaultSocketAdapter">
        <property name="Adapters" dependencyType="Adaptation.IAdapterCollection" />
        <property name="Settings" dependencyType="Adaptation.AdapterSettings" />
        <interceptor type="InterfaceInterceptor"/>
        <interceptionBehavior type="ExceptionLogInterceptionBehavior"/>
        <lifetime type="singleton" />
      </register>

      <register type="Thread.IThreadAdapter" mapTo="Thread.DefaultThreadAdapter">
        <property name="Adapters" dependencyType="Adaptation.IAdapterCollection" />
        <property name="Settings" dependencyType="Adaptation.AdapterSettings" />
        <interceptor type="InterfaceInterceptor"/>
        <interceptionBehavior type="ExceptionLogInterceptionBehavior"/>
        <lifetime type="singleton" />
      </register>

      <register type="WinService.IWinServiceAdapter" mapTo="WinService.DefaultWinServiceAdapter">
        <property name="Adapters" dependencyType="Adaptation.IAdapterCollection" />
        <property name="Settings" dependencyType="Adaptation.AdapterSettings" />
        <interceptor type="InterfaceInterceptor"/>
        <interceptionBehavior type="ExceptionLogInterceptionBehavior"/>
        <lifetime type="singleton" />
      </register>
      
    </container>
  </unity>
</configuration>